{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Mehdi\\\\Desktop\\\\Vocabulary\\\\vocab-builder\\\\client\\\\src\\\\pages\\\\Vocabulary.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport VocabularyContainer from '../components/VocabularyContainer';\nimport '../styles/Vocabulary.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_URL = 'http://localhost:3000/api/vocab';\nconst Vocabulary = () => {\n  _s();\n  const [vocabularyList, setVocabularyList] = useState([]);\n  const [suggestedWords, setSuggestedWords] = useState([]);\n  useEffect(() => {\n    fetchVocabulary();\n    fetchSuggestedWords();\n  }, []);\n  const fetchVocabulary = async () => {\n    try {\n      const userId = localStorage.getItem('userId');\n      if (userId) {\n        const response = await axios.get(`${API_URL}?userId=${userId}`);\n        setVocabularyList(response.data);\n      }\n    } catch (error) {\n      console.error('Error fetching vocabulary:', error);\n    }\n  };\n  const fetchSuggestedWords = async () => {\n    const userId = localStorage.getItem('userId');\n    if (!userId) return;\n    try {\n      const response = await axios.get(`${API_URL}/suggestions/${userId}`);\n      setSuggestedWords(response.data);\n    } catch (error) {\n      console.error('Error fetching suggested words:', error);\n    }\n  };\n  const handleAddWord = async newWord => {\n    try {\n      const response = await axios.post(API_URL, newWord);\n      setVocabularyList(prevList => [...prevList, response.data]);\n    } catch (error) {\n      console.error('Error adding new word:', error);\n    }\n  };\n  const handleAddSuggestedWord = async suggestedWord => {\n    try {\n      const response = await axios.post(API_URL, suggestedWord);\n      setVocabularyList(prevList => [...prevList, response.data]);\n      setSuggestedWords(prevList => prevList.filter(word => word.word !== suggestedWord.word));\n    } catch (error) {\n      console.error('Error adding suggested word:', error);\n    }\n  };\n  const handleDeleteWord = async wordId => {\n    try {\n      await axios.delete(`${API_URL}/${wordId}`);\n      setVocabularyList(prevList => prevList.filter(word => word._id !== wordId));\n    } catch (error) {\n      console.error('Error deleting word:', error);\n    }\n  };\n  const handleUpdateWord = async (wordId, updatedWord) => {\n    try {\n      await axios.put(`${API_URL}/${wordId}`, updatedWord);\n      setVocabularyList(prevList => prevList.map(word => word._id === wordId ? updatedWord : word));\n    } catch (error) {\n      console.error('Error updating word:', error);\n    }\n  };\n  const handleEditProfile = () => {\n    // Redirect or open the Edit Profile page\n    window.location.href = '/edit-profile';\n  };\n  const handleLogout = () => {\n    localStorage.removeItem('userId');\n    window.location.href = '/';\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"vocabulary-page\",\n    children: /*#__PURE__*/_jsxDEV(VocabularyContainer, {\n      vocabularyList: vocabularyList,\n      suggestedWords: suggestedWords,\n      onAddWord: handleAddWord,\n      onAddSuggestedWord: handleAddSuggestedWord,\n      onDeleteWord: handleDeleteWord,\n      onUpdateWord: handleUpdateWord,\n      onEditProfile: handleEditProfile,\n      onLogout: handleLogout\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 5\n  }, this);\n};\n_s(Vocabulary, \"G6s6ZJDuue5sjQ8XUFoT3utFyzY=\");\n_c = Vocabulary;\nexport default Vocabulary;\nvar _c;\n$RefreshReg$(_c, \"Vocabulary\");","map":{"version":3,"names":["React","useEffect","useState","axios","VocabularyContainer","jsxDEV","_jsxDEV","API_URL","Vocabulary","_s","vocabularyList","setVocabularyList","suggestedWords","setSuggestedWords","fetchVocabulary","fetchSuggestedWords","userId","localStorage","getItem","response","get","data","error","console","handleAddWord","newWord","post","prevList","handleAddSuggestedWord","suggestedWord","filter","word","handleDeleteWord","wordId","delete","_id","handleUpdateWord","updatedWord","put","map","handleEditProfile","window","location","href","handleLogout","removeItem","className","children","onAddWord","onAddSuggestedWord","onDeleteWord","onUpdateWord","onEditProfile","onLogout","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Mehdi/Desktop/Vocabulary/vocab-builder/client/src/pages/Vocabulary.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\nimport VocabularyContainer from '../components/VocabularyContainer';\r\nimport '../styles/Vocabulary.css';\r\n\r\nconst API_URL = 'http://localhost:3000/api/vocab';\r\n\r\nconst Vocabulary = () => {\r\n  const [vocabularyList, setVocabularyList] = useState([]);\r\n  const [suggestedWords, setSuggestedWords] = useState([]);\r\n\r\n  useEffect(() => {\r\n    fetchVocabulary();\r\n    fetchSuggestedWords();\r\n  }, []);\r\n\r\n  const fetchVocabulary = async () => {\r\n    try {\r\n      const userId = localStorage.getItem('userId');\r\n      if (userId) {\r\n        const response = await axios.get(`${API_URL}?userId=${userId}`);\r\n        setVocabularyList(response.data);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error fetching vocabulary:', error);\r\n    }\r\n  };\r\n\r\n  const fetchSuggestedWords = async () => {\r\n    const userId = localStorage.getItem('userId');\r\n    if (!userId) return;\r\n    try {\r\n      const response = await axios.get(`${API_URL}/suggestions/${userId}`);\r\n      setSuggestedWords(response.data);\r\n    } catch (error) {\r\n      console.error('Error fetching suggested words:', error);\r\n    }\r\n  };\r\n\r\n  const handleAddWord = async (newWord) => {\r\n    try {\r\n      const response = await axios.post(API_URL, newWord);\r\n      setVocabularyList((prevList) => [...prevList, response.data]);\r\n    } catch (error) {\r\n      console.error('Error adding new word:', error);\r\n    }\r\n  };\r\n\r\n  const handleAddSuggestedWord = async (suggestedWord) => {\r\n    try {\r\n      const response = await axios.post(API_URL, suggestedWord);\r\n      setVocabularyList((prevList) => [...prevList, response.data]);\r\n      setSuggestedWords((prevList) =>\r\n        prevList.filter((word) => word.word !== suggestedWord.word)\r\n      );\r\n    } catch (error) {\r\n      console.error('Error adding suggested word:', error);\r\n    }\r\n  };\r\n\r\n  const handleDeleteWord = async (wordId) => {\r\n    try {\r\n      await axios.delete(`${API_URL}/${wordId}`);\r\n      setVocabularyList((prevList) => prevList.filter((word) => word._id !== wordId));\r\n    } catch (error) {\r\n      console.error('Error deleting word:', error);\r\n    }\r\n  };\r\n\r\n  const handleUpdateWord = async (wordId, updatedWord) => {\r\n    try {\r\n      await axios.put(`${API_URL}/${wordId}`, updatedWord);\r\n      setVocabularyList((prevList) =>\r\n        prevList.map((word) => (word._id === wordId ? updatedWord : word))\r\n      );\r\n    } catch (error) {\r\n      console.error('Error updating word:', error);\r\n    }\r\n  };\r\n\r\n  const handleEditProfile = () => {\r\n    // Redirect or open the Edit Profile page\r\n    window.location.href = '/edit-profile';\r\n  };\r\n\r\n  const handleLogout = () => {\r\n    localStorage.removeItem('userId');\r\n    window.location.href = '/';\r\n  };\r\n\r\n  return (\r\n    <div className=\"vocabulary-page\">\r\n      <VocabularyContainer\r\n        vocabularyList={vocabularyList}\r\n        suggestedWords={suggestedWords}\r\n        onAddWord={handleAddWord}\r\n        onAddSuggestedWord={handleAddSuggestedWord}\r\n        onDeleteWord={handleDeleteWord}\r\n        onUpdateWord={handleUpdateWord}\r\n        onEditProfile={handleEditProfile}\r\n        onLogout={handleLogout}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Vocabulary;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}