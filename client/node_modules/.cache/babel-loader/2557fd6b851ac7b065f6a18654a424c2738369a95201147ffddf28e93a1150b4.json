{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Mehdi\\\\Desktop\\\\Vocabulary\\\\vocab-builder\\\\client\\\\src\\\\pages\\\\Vocabulary.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport Sidebar from '../components/Sidebar';\nimport AddWordForm from '../components/AddWordForm';\nimport VocabularyCard from '../components/VocabularyCard';\nimport SuggestedWordCard from '../components/SuggestedWordCard';\nimport UpdateWordForm from '../components/UpdateWordForm';\nimport Modal from '../components/Modal';\nimport '../styles/Vocabulary.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_URL = 'http://localhost:3000/api/vocab';\nconst Vocabulary = () => {\n  _s();\n  const [vocabularyList, setVocabularyList] = useState([]);\n  const [userId, setUserId] = useState(null);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [isUpdateModalOpen, setIsUpdateModalOpen] = useState(false); // State for update modal\n  const [currentWord, setCurrentWord] = useState(null);\n  const [showUpdateForm, setShowUpdateForm] = useState(false);\n  const [suggestedWords, setSuggestedWords] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [errorMessage, setErrorMessage] = useState(null);\n  useEffect(() => {\n    const fetchVocabulary = async () => {\n      setLoading(true);\n      try {\n        const userIdFromStorage = localStorage.getItem('userId');\n        if (userIdFromStorage) {\n          setUserId(userIdFromStorage);\n          const response = await axios.get(`${API_URL}?userId=${userIdFromStorage}`);\n          setVocabularyList(response.data);\n        }\n      } catch (error) {\n        console.error('Error fetching vocabulary:', error);\n        setErrorMessage('An error occurred while fetching vocabulary.');\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchVocabulary();\n  }, []);\n  const handleUpdateWord = id => {\n    const wordToUpdate = vocabularyList.find(vocab => vocab._id === id);\n    if (wordToUpdate) {\n      setCurrentWord(wordToUpdate);\n      setIsUpdateModalOpen(true); // Open the update modal\n    }\n  };\n  const handleUpdateWordSubmit = async (id, updatedWordData) => {\n    try {\n      await axios.put(`${API_URL}/${id}`, updatedWordData);\n      setVocabularyList(vocabularyList.map(vocab => vocab._id === id ? {\n        ...vocab,\n        ...updatedWordData\n      } : vocab));\n      setIsUpdateModalOpen(false); // Close update modal after submission\n      setCurrentWord(null);\n      fetchSuggestedWords();\n    } catch (error) {\n      console.error('Error updating word:', error);\n      setErrorMessage('An error occurred while updating the word.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"vocabulary-container\",\n    children: [/*#__PURE__*/_jsxDEV(Sidebar, {\n      onLogout: handleLogout,\n      onEditProfile: handleEditProfile,\n      onAddClick: () => setIsModalOpen(true)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this), loading && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 19\n    }, this), errorMessage && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error-message\",\n      children: errorMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 24\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"vocabulary-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"My Vocabulary\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Modal, {\n        isOpen: isModalOpen,\n        onClose: () => setIsModalOpen(false),\n        children: /*#__PURE__*/_jsxDEV(AddWordForm, {\n          onAddWord: handleAddWord,\n          onCancel: () => setIsModalOpen(false)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Modal, {\n        isOpen: isUpdateModalOpen,\n        onClose: () => setIsUpdateModalOpen(false),\n        children: currentWord && /*#__PURE__*/_jsxDEV(UpdateWordForm, {\n          currentWord: currentWord,\n          onUpdate: updatedData => handleUpdateWordSubmit(currentWord._id, updatedData),\n          onCancel: () => setIsUpdateModalOpen(false)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"vocabulary-cards\",\n        children: vocabularyList.map(vocab => /*#__PURE__*/_jsxDEV(VocabularyCard, {\n          vocab: vocab,\n          onDelete: handleDeleteWord,\n          onUpdate: () => handleUpdateWord(vocab._id),\n          onIncreaseReview: handleIncreaseReview,\n          onDecreaseReview: handleDecreaseReview\n        }, vocab._id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 5\n  }, this);\n};\n_s(Vocabulary, \"PiSvhRXpAovAnuc5n3DvpFBPp7c=\");\n_c = Vocabulary;\nexport default Vocabulary;\nvar _c;\n$RefreshReg$(_c, \"Vocabulary\");","map":{"version":3,"names":["React","useState","useEffect","axios","Sidebar","AddWordForm","VocabularyCard","SuggestedWordCard","UpdateWordForm","Modal","jsxDEV","_jsxDEV","API_URL","Vocabulary","_s","vocabularyList","setVocabularyList","userId","setUserId","isModalOpen","setIsModalOpen","isUpdateModalOpen","setIsUpdateModalOpen","currentWord","setCurrentWord","showUpdateForm","setShowUpdateForm","suggestedWords","setSuggestedWords","loading","setLoading","errorMessage","setErrorMessage","fetchVocabulary","userIdFromStorage","localStorage","getItem","response","get","data","error","console","handleUpdateWord","id","wordToUpdate","find","vocab","_id","handleUpdateWordSubmit","updatedWordData","put","map","fetchSuggestedWords","className","children","onLogout","handleLogout","onEditProfile","handleEditProfile","onAddClick","fileName","_jsxFileName","lineNumber","columnNumber","isOpen","onClose","onAddWord","handleAddWord","onCancel","onUpdate","updatedData","onDelete","handleDeleteWord","onIncreaseReview","handleIncreaseReview","onDecreaseReview","handleDecreaseReview","_c","$RefreshReg$"],"sources":["C:/Users/Mehdi/Desktop/Vocabulary/vocab-builder/client/src/pages/Vocabulary.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport Sidebar from '../components/Sidebar';\r\nimport AddWordForm from '../components/AddWordForm';\r\nimport VocabularyCard from '../components/VocabularyCard';\r\nimport SuggestedWordCard from '../components/SuggestedWordCard';\r\nimport UpdateWordForm from '../components/UpdateWordForm';\r\nimport Modal from '../components/Modal';\r\n\r\nimport '../styles/Vocabulary.css';\r\n\r\nconst API_URL = 'http://localhost:3000/api/vocab';\r\n\r\nconst Vocabulary = () => {\r\n  const [vocabularyList, setVocabularyList] = useState([]);\r\n  const [userId, setUserId] = useState(null);\r\n  const [isModalOpen, setIsModalOpen] = useState(false);\r\n  const [isUpdateModalOpen, setIsUpdateModalOpen] = useState(false); // State for update modal\r\n  const [currentWord, setCurrentWord] = useState(null);\r\n  const [showUpdateForm, setShowUpdateForm] = useState(false);\r\n  const [suggestedWords, setSuggestedWords] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [errorMessage, setErrorMessage] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const fetchVocabulary = async () => {\r\n      setLoading(true);\r\n      try {\r\n        const userIdFromStorage = localStorage.getItem('userId');\r\n        if (userIdFromStorage) {\r\n          setUserId(userIdFromStorage);\r\n          const response = await axios.get(`${API_URL}?userId=${userIdFromStorage}`);\r\n          setVocabularyList(response.data);\r\n        }\r\n      } catch (error) {\r\n        console.error('Error fetching vocabulary:', error);\r\n        setErrorMessage('An error occurred while fetching vocabulary.');\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n    fetchVocabulary();\r\n  }, []);\r\n\r\n  const handleUpdateWord = (id) => {\r\n    const wordToUpdate = vocabularyList.find(vocab => vocab._id === id);\r\n    if (wordToUpdate) {\r\n      setCurrentWord(wordToUpdate);\r\n      setIsUpdateModalOpen(true); // Open the update modal\r\n    }\r\n  };\r\n\r\n  const handleUpdateWordSubmit = async (id, updatedWordData) => {\r\n    try {\r\n      await axios.put(`${API_URL}/${id}`, updatedWordData);\r\n      setVocabularyList(vocabularyList.map((vocab) =>\r\n        vocab._id === id ? { ...vocab, ...updatedWordData } : vocab\r\n      ));\r\n      setIsUpdateModalOpen(false); // Close update modal after submission\r\n      setCurrentWord(null);\r\n      fetchSuggestedWords();\r\n    } catch (error) {\r\n      console.error('Error updating word:', error);\r\n      setErrorMessage('An error occurred while updating the word.');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"vocabulary-container\">\r\n      <Sidebar onLogout={handleLogout} onEditProfile={handleEditProfile} onAddClick={() => setIsModalOpen(true)} />\r\n      {loading && <p>Loading...</p>}\r\n      {errorMessage && <p className=\"error-message\">{errorMessage}</p>}\r\n      \r\n      <div className=\"vocabulary-content\">\r\n        <h2>My Vocabulary</h2>\r\n        \r\n        {/* Modal for AddWordForm */}\r\n        <Modal isOpen={isModalOpen} onClose={() => setIsModalOpen(false)}>\r\n          <AddWordForm onAddWord={handleAddWord} onCancel={() => setIsModalOpen(false)} />\r\n        </Modal>\r\n        \r\n        {/* Modal for UpdateWordForm */}\r\n        <Modal isOpen={isUpdateModalOpen} onClose={() => setIsUpdateModalOpen(false)}>\r\n          {currentWord && (\r\n            <UpdateWordForm \r\n              currentWord={currentWord}\r\n              onUpdate={(updatedData) => handleUpdateWordSubmit(currentWord._id, updatedData)}\r\n              onCancel={() => setIsUpdateModalOpen(false)}\r\n            />\r\n          )}\r\n        </Modal>\r\n\r\n        <div className=\"vocabulary-cards\">\r\n          {vocabularyList.map((vocab) => (\r\n            <VocabularyCard \r\n              key={vocab._id} \r\n              vocab={vocab} \r\n              onDelete={handleDeleteWord} \r\n              onUpdate={() => handleUpdateWord(vocab._id)} \r\n              onIncreaseReview={handleIncreaseReview} \r\n              onDecreaseReview={handleDecreaseReview} \r\n            />\r\n          ))}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Vocabulary;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}